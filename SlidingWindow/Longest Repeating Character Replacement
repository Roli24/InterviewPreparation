/*
https://leetcode.com/problems/longest-repeating-character-replacement/
Longest Repeating Character Replacement
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
*/
// window size - most frequent element <= k that means its valid window.

class Solution {
    public int characterReplacement(String s, int k) {

        int left = 0;
        int right = 0;
        int largest = 0;
        int[] count = new int[26];
        int max =0;
         while(right < s.length())
            {
                count[s.charAt(right) - 'A'] = count[s.charAt(right) - 'A']+1;
                largest = Math.max(largest,  count[s.charAt(right) - 'A']);

                if(right-left+1 - largest > k)
                {
                    count[s.charAt(left) - 'A'] =count[s.charAt(left) - 'A'] - 1;
                    left++;
                }
                    
                
                max = Math.max(max, right-left+1);
                right++;

            }
            return max;
}
}
